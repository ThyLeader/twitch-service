// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: twitch.proto

package pb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"

import context "golang.org/x/net/context"
import grpc "google.golang.org/grpc"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

type GetChannelsRequest struct {
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChannelsRequest) Reset()         { *m = GetChannelsRequest{} }
func (m *GetChannelsRequest) String() string { return proto.CompactTextString(m) }
func (*GetChannelsRequest) ProtoMessage()    {}
func (*GetChannelsRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_twitch_e613e3fb58de86e8, []int{0}
}
func (m *GetChannelsRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelsRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelsRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetChannelsRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelsRequest.Merge(dst, src)
}
func (m *GetChannelsRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelsRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelsRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelsRequest proto.InternalMessageInfo

func (m *GetChannelsRequest) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type GetChannelsResponse struct {
	Name                 []string `protobuf:"bytes,1,rep,name=name" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *GetChannelsResponse) Reset()         { *m = GetChannelsResponse{} }
func (m *GetChannelsResponse) String() string { return proto.CompactTextString(m) }
func (*GetChannelsResponse) ProtoMessage()    {}
func (*GetChannelsResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_twitch_e613e3fb58de86e8, []int{1}
}
func (m *GetChannelsResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetChannelsResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetChannelsResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *GetChannelsResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetChannelsResponse.Merge(dst, src)
}
func (m *GetChannelsResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetChannelsResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetChannelsResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetChannelsResponse proto.InternalMessageInfo

func (m *GetChannelsResponse) GetName() []string {
	if m != nil {
		return m.Name
	}
	return nil
}

type NewWebhookRequest struct {
	// discord channel id
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// twitch username
	Twitchname           string   `protobuf:"bytes,2,opt,name=twitchname,proto3" json:"twitchname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewWebhookRequest) Reset()         { *m = NewWebhookRequest{} }
func (m *NewWebhookRequest) String() string { return proto.CompactTextString(m) }
func (*NewWebhookRequest) ProtoMessage()    {}
func (*NewWebhookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_twitch_e613e3fb58de86e8, []int{2}
}
func (m *NewWebhookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWebhookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWebhookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NewWebhookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWebhookRequest.Merge(dst, src)
}
func (m *NewWebhookRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewWebhookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWebhookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewWebhookRequest proto.InternalMessageInfo

func (m *NewWebhookRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *NewWebhookRequest) GetTwitchname() string {
	if m != nil {
		return m.Twitchname
	}
	return ""
}

type NewWebhookResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *NewWebhookResponse) Reset()         { *m = NewWebhookResponse{} }
func (m *NewWebhookResponse) String() string { return proto.CompactTextString(m) }
func (*NewWebhookResponse) ProtoMessage()    {}
func (*NewWebhookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_twitch_e613e3fb58de86e8, []int{3}
}
func (m *NewWebhookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewWebhookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewWebhookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *NewWebhookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewWebhookResponse.Merge(dst, src)
}
func (m *NewWebhookResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewWebhookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewWebhookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewWebhookResponse proto.InternalMessageInfo

type DeleteWebhookRequest struct {
	// discord channel id
	Channel string `protobuf:"bytes,1,opt,name=channel,proto3" json:"channel,omitempty"`
	// twitch username
	Twitchname           string   `protobuf:"bytes,2,opt,name=twitchname,proto3" json:"twitchname,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteWebhookRequest) Reset()         { *m = DeleteWebhookRequest{} }
func (m *DeleteWebhookRequest) String() string { return proto.CompactTextString(m) }
func (*DeleteWebhookRequest) ProtoMessage()    {}
func (*DeleteWebhookRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_twitch_e613e3fb58de86e8, []int{4}
}
func (m *DeleteWebhookRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteWebhookRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteWebhookRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteWebhookRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteWebhookRequest.Merge(dst, src)
}
func (m *DeleteWebhookRequest) XXX_Size() int {
	return m.Size()
}
func (m *DeleteWebhookRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteWebhookRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteWebhookRequest proto.InternalMessageInfo

func (m *DeleteWebhookRequest) GetChannel() string {
	if m != nil {
		return m.Channel
	}
	return ""
}

func (m *DeleteWebhookRequest) GetTwitchname() string {
	if m != nil {
		return m.Twitchname
	}
	return ""
}

type DeleteWebhookResponse struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *DeleteWebhookResponse) Reset()         { *m = DeleteWebhookResponse{} }
func (m *DeleteWebhookResponse) String() string { return proto.CompactTextString(m) }
func (*DeleteWebhookResponse) ProtoMessage()    {}
func (*DeleteWebhookResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_twitch_e613e3fb58de86e8, []int{5}
}
func (m *DeleteWebhookResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DeleteWebhookResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DeleteWebhookResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (dst *DeleteWebhookResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DeleteWebhookResponse.Merge(dst, src)
}
func (m *DeleteWebhookResponse) XXX_Size() int {
	return m.Size()
}
func (m *DeleteWebhookResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DeleteWebhookResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DeleteWebhookResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*GetChannelsRequest)(nil), "twitch.GetChannelsRequest")
	proto.RegisterType((*GetChannelsResponse)(nil), "twitch.GetChannelsResponse")
	proto.RegisterType((*NewWebhookRequest)(nil), "twitch.NewWebhookRequest")
	proto.RegisterType((*NewWebhookResponse)(nil), "twitch.NewWebhookResponse")
	proto.RegisterType((*DeleteWebhookRequest)(nil), "twitch.DeleteWebhookRequest")
	proto.RegisterType((*DeleteWebhookResponse)(nil), "twitch.DeleteWebhookResponse")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Twitch service

type TwitchClient interface {
	GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*GetChannelsResponse, error)
	NewWebhook(ctx context.Context, in *NewWebhookRequest, opts ...grpc.CallOption) (*NewWebhookResponse, error)
	DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error)
}

type twitchClient struct {
	cc *grpc.ClientConn
}

func NewTwitchClient(cc *grpc.ClientConn) TwitchClient {
	return &twitchClient{cc}
}

func (c *twitchClient) GetChannels(ctx context.Context, in *GetChannelsRequest, opts ...grpc.CallOption) (*GetChannelsResponse, error) {
	out := new(GetChannelsResponse)
	err := c.cc.Invoke(ctx, "/twitch.Twitch/GetChannels", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchClient) NewWebhook(ctx context.Context, in *NewWebhookRequest, opts ...grpc.CallOption) (*NewWebhookResponse, error) {
	out := new(NewWebhookResponse)
	err := c.cc.Invoke(ctx, "/twitch.Twitch/NewWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *twitchClient) DeleteWebhook(ctx context.Context, in *DeleteWebhookRequest, opts ...grpc.CallOption) (*DeleteWebhookResponse, error) {
	out := new(DeleteWebhookResponse)
	err := c.cc.Invoke(ctx, "/twitch.Twitch/DeleteWebhook", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Twitch service

type TwitchServer interface {
	GetChannels(context.Context, *GetChannelsRequest) (*GetChannelsResponse, error)
	NewWebhook(context.Context, *NewWebhookRequest) (*NewWebhookResponse, error)
	DeleteWebhook(context.Context, *DeleteWebhookRequest) (*DeleteWebhookResponse, error)
}

func RegisterTwitchServer(s *grpc.Server, srv TwitchServer) {
	s.RegisterService(&_Twitch_serviceDesc, srv)
}

func _Twitch_GetChannels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetChannelsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchServer).GetChannels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitch.Twitch/GetChannels",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchServer).GetChannels(ctx, req.(*GetChannelsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitch_NewWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchServer).NewWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitch.Twitch/NewWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchServer).NewWebhook(ctx, req.(*NewWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Twitch_DeleteWebhook_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteWebhookRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TwitchServer).DeleteWebhook(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/twitch.Twitch/DeleteWebhook",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TwitchServer).DeleteWebhook(ctx, req.(*DeleteWebhookRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Twitch_serviceDesc = grpc.ServiceDesc{
	ServiceName: "twitch.Twitch",
	HandlerType: (*TwitchServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetChannels",
			Handler:    _Twitch_GetChannels_Handler,
		},
		{
			MethodName: "NewWebhook",
			Handler:    _Twitch_NewWebhook_Handler,
		},
		{
			MethodName: "DeleteWebhook",
			Handler:    _Twitch_DeleteWebhook_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "twitch.proto",
}

func (m *GetChannelsRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelsRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTwitch(dAtA, i, uint64(len(m.Id)))
		i += copy(dAtA[i:], m.Id)
	}
	return i, nil
}

func (m *GetChannelsResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetChannelsResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			dAtA[i] = 0xa
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func (m *NewWebhookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWebhookRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTwitch(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.Twitchname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTwitch(dAtA, i, uint64(len(m.Twitchname)))
		i += copy(dAtA[i:], m.Twitchname)
	}
	return i, nil
}

func (m *NewWebhookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewWebhookResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *DeleteWebhookRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteWebhookRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Channel) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintTwitch(dAtA, i, uint64(len(m.Channel)))
		i += copy(dAtA[i:], m.Channel)
	}
	if len(m.Twitchname) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintTwitch(dAtA, i, uint64(len(m.Twitchname)))
		i += copy(dAtA[i:], m.Twitchname)
	}
	return i, nil
}

func (m *DeleteWebhookResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DeleteWebhookResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintTwitch(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *GetChannelsRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTwitch(uint64(l))
	}
	return n
}

func (m *GetChannelsResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Name) > 0 {
		for _, s := range m.Name {
			l = len(s)
			n += 1 + l + sovTwitch(uint64(l))
		}
	}
	return n
}

func (m *NewWebhookRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTwitch(uint64(l))
	}
	l = len(m.Twitchname)
	if l > 0 {
		n += 1 + l + sovTwitch(uint64(l))
	}
	return n
}

func (m *NewWebhookResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *DeleteWebhookRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Channel)
	if l > 0 {
		n += 1 + l + sovTwitch(uint64(l))
	}
	l = len(m.Twitchname)
	if l > 0 {
		n += 1 + l + sovTwitch(uint64(l))
	}
	return n
}

func (m *DeleteWebhookResponse) Size() (n int) {
	var l int
	_ = l
	return n
}

func sovTwitch(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozTwitch(x uint64) (n int) {
	return sovTwitch(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *GetChannelsRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTwitch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTwitch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTwitch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTwitch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetChannelsResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTwitch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetChannelsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetChannelsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTwitch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = append(m.Name, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTwitch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTwitch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewWebhookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTwitch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWebhookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWebhookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTwitch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Twitchname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTwitch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Twitchname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTwitch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTwitch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewWebhookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTwitch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewWebhookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewWebhookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTwitch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTwitch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteWebhookRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTwitch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteWebhookRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteWebhookRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Channel", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTwitch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Channel = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Twitchname", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTwitch
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTwitch
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Twitchname = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTwitch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTwitch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DeleteWebhookResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTwitch
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DeleteWebhookResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DeleteWebhookResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTwitch(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthTwitch
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTwitch(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTwitch
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTwitch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTwitch
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthTwitch
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowTwitch
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipTwitch(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthTwitch = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTwitch   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("twitch.proto", fileDescriptor_twitch_e613e3fb58de86e8) }

var fileDescriptor_twitch_e613e3fb58de86e8 = []byte{
	// 272 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0xe2, 0x29, 0x29, 0xcf, 0x2c,
	0x49, 0xce, 0xd0, 0x2b, 0x28, 0xca, 0x2f, 0xc9, 0x17, 0x62, 0x83, 0xf0, 0x94, 0x54, 0xb8, 0x84,
	0xdc, 0x53, 0x4b, 0x9c, 0x33, 0x12, 0xf3, 0xf2, 0x52, 0x73, 0x8a, 0x83, 0x52, 0x0b, 0x4b, 0x53,
	0x8b, 0x4b, 0x84, 0xf8, 0xb8, 0x98, 0x32, 0x53, 0x24, 0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x98,
	0x32, 0x53, 0x94, 0x34, 0xb9, 0x84, 0x51, 0x54, 0x15, 0x17, 0xe4, 0xe7, 0x15, 0xa7, 0x0a, 0x09,
	0x71, 0xb1, 0xe4, 0x25, 0xe6, 0xa6, 0x4a, 0x30, 0x2a, 0x30, 0x6b, 0x70, 0x06, 0x81, 0xd9, 0x4a,
	0xbe, 0x5c, 0x82, 0x7e, 0xa9, 0xe5, 0xe1, 0xa9, 0x49, 0x19, 0xf9, 0xf9, 0xd9, 0x30, 0xf3, 0x24,
	0xb8, 0xd8, 0x93, 0x21, 0x9a, 0xa1, 0x86, 0xc2, 0xb8, 0x42, 0x72, 0x5c, 0x5c, 0x10, 0x97, 0x80,
	0x0d, 0x62, 0x02, 0x4b, 0x22, 0x89, 0x28, 0x89, 0x70, 0x09, 0x21, 0x1b, 0x07, 0xb1, 0x58, 0x29,
	0x80, 0x4b, 0xc4, 0x25, 0x35, 0x27, 0xb5, 0x24, 0x95, 0x6a, 0xf6, 0x88, 0x73, 0x89, 0xa2, 0x99,
	0x08, 0xb1, 0xca, 0xe8, 0x25, 0x23, 0x17, 0x5b, 0x08, 0x58, 0x9d, 0x90, 0x07, 0x17, 0x37, 0x52,
	0x28, 0x08, 0x49, 0xe9, 0x41, 0x43, 0x14, 0x33, 0x00, 0xa5, 0xa4, 0xb1, 0xca, 0x41, 0x5d, 0xcf,
	0x20, 0xe4, 0xca, 0xc5, 0x85, 0xf0, 0x95, 0x90, 0x24, 0x4c, 0x31, 0x46, 0xc0, 0x49, 0x49, 0x61,
	0x93, 0x82, 0x1b, 0xe3, 0xc7, 0xc5, 0x8b, 0xe2, 0x68, 0x21, 0x19, 0x98, 0x72, 0x6c, 0xa1, 0x23,
	0x25, 0x8b, 0x43, 0x16, 0x66, 0x9e, 0x93, 0xc8, 0x89, 0x47, 0x72, 0x8c, 0x17, 0x1e, 0xc9, 0x31,
	0x3e, 0x78, 0x24, 0xc7, 0x38, 0xe1, 0xb1, 0x1c, 0x43, 0x14, 0x53, 0x41, 0x52, 0x12, 0x1b, 0x38,
	0xc5, 0x18, 0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0x3a, 0xc0, 0xc9, 0x67, 0x41, 0x02, 0x00, 0x00,
}
